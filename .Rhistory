}
getCoeffs <-function (addends){
matrix_data = parseAddends(addends)
return(matrix_data$coeffs)
}
parseAddends <- function (addends){
vars <- c()
coeffs <- c()
for (i in 1: length (addends)){
eq_vars <- c ()
eq_coeffs <- c()
for (j in 1: length(addends[[i]][-length(addends[[i]])])){
factors = strsplit(addends[[i]][[j]], "\\*")
coeff = as.numeric(trimws(factors[[1]][[1]]))
var = trimws(factors[[1]][[2]])
eq_vars <- append(eq_vars, var)
eq_coeffs <- append (eq_coeffs, coeff)
}
if (!length(vars)){
vars <- sort(eq_vars)
}
if (!setequal(eq_vars, vars)){
return (list())
}
sorted_eq_coeffs <-numeric (length(eq_vars))
for (i in 1:length(eq_vars)){
degree = strtoi(strsplit(eq_vars[i], "")[[1]][2])
sorted_eq_coeffs[degree] <- eq_coeffs[i]
}
coeffs <- append (coeffs, sorted_eq_coeffs)
}
return (list(vars = vars, coeffs = coeffs))
}
deparseSystem <-function(system){
equations<-c()
for (i in 1:length(system)){
eq <- deparse(system[[i]])
eq_str <- c()
for (i in 2: length (eq)){
eq_str <- paste(eq_str, eq[[i]])
}
equations <- append(equations, eq_str)
}
return (equations)
}
buildMatrix <-function (equations){
addends <- strsplit (equations, "\\+")
vars <- getVars(addends)
if (!length(vars)) return (NA)
consts <- getConsts(addends)
coeffs <- getCoeffs(addends)
mat <- matrix (coeffs, nrow = length(equations), ncol=length(vars), byrow = TRUE)
rownames(mat)<-(1:length(equations))
mat <-cbind(mat, consts)
colnames(mat)<-c(vars, "RHS")
return (list(variables = vars, augcoeffmatrix = mat))
}
AugCoeffMatrix <-function (system){
equations <- deparseSystem (system)
matrix_data <- buildMatrix(equations)
return (matrix_data)
}
E1 <- function (x1, x2, x3, x4, x5, x6) 245 * x1 + 54 * x2 + 30 * x3 + 29 * x4 + 16.25 * x5 + 0 * x6 + -1000
E2 <- function (x1, x2, x3, x4, x5, x6) 35 * x1 + 162 * x2 + 0 * x3 + 29 * x4 + 16.25 * x5 + 36 * x6 + -700
E3 <- function (x1, x2, x3, x4, x5, x6) 17.5 * x1 + 27 * x2 + 225 * x3 + 29 * x4 + 0 * x5 + 18 * x6 + -1300
E4 <- function (x1, x2, x3, x4, x5, x6) 17.5 * x1 + 0 * x2 + 15 * x3 + 174 * x4 + 16.25 * x5 + 18 * x6 + -900
E5 <- function (x1, x2, x3, x4, x5, x6) 0 * x1 + 13.5 * x2 + 15 * x3 + 29 * x4 + 243.75 * x5 + 72 * x6 + -1500
E6 <- function (x1, x2, x3, x4, x5, x6) 35 * x1 + 13.5 * x2 + 15 * x3 + 0 * x4 + 32.5 * x5 + 216 * x6 + -1200
system <- list(E1, E2, E3, E4, E5, E6)
print(AugCoeffMatrix(system))
#' This R script solves the forester problem in the problem set.
#' A system of six equations is first set up, with the following features:
#'
#' coefficients -> volume per hectare of each wood type per planting site
#' constants -> required volume of each wood type
#' unknowns (x1, x2, ...x6) -> how much should be logged per planting site
#'
#' The system is then converted into an augmented coefficient matrix through
#' the AugCoeffMatrix function. Finally, the solution set of the problem is
#' arrived at through functions performing Gaussian or Gauss-Jordan elmination.
#'
#' @author Jose Enrique Lopez
#' @date 12-10-20 20:50
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
source ("LopezEx04.R")
E1 <- function (x1, x2, x3, x4, x5, x6) 245 * x1 + 54 * x2 + 30 * x3 + 29 * x4 + 16.25 * x5 + 0 * x6 + -1000
E2 <- function (x1, x2, x3, x4, x5, x6) 35 * x1 + 162 * x2 + 0 * x3 + 29 * x4 + 16.25 * x5 + 36 * x6 + -700
E3 <- function (x1, x2, x3, x4, x5, x6) 17.5 * x1 + 27 * x2 + 225 * x3 + 29 * x4 + 0 * x5 + 18 * x6 + -1300
E4 <- function (x1, x2, x3, x4, x5, x6) 17.5 * x1 + 0 * x2 + 15 * x3 + 174 * x4 + 16.25 * x5 + 18 * x6 + -900
E5 <- function (x1, x2, x3, x4, x5, x6) 0 * x1 + 13.5 * x2 + 15 * x3 + 29 * x4 + 243.75 * x5 + 72 * x6 + -1500
E6 <- function (x1, x2, x3, x4, x5, x6) 35 * x1 + 13.5 * x2 + 15 * x3 + 0 * x4 + 32.5 * x5 + 216 * x6 + -1200
system <-list(E1, E2, E3, E4, E5, E6)
result <-AugCoeffMatrix(system)
GaussianResult <- GaussianElimination(system)
GaussJordanResult <- GaussJordanElimination(system)
print(GaussianResult)
print(GaussJordanResult)
#' This R script takes a system of equations and converts it
#' into its matrix representation. The system is deparsed and each equation
#' is tokenized into its corresponding addends and factors. Each token is then
#' parsed to arrive at the constants, coefficients, and variables of the system.
#' This information is  compiled into a list containing 1) an augmented coefficient
#' matrix representing the system and 2) a vector of the variables.
#' This list is returned once the system of equations has been successfully parsed;
#' otherwise, a value of NA is returned.
#'
#' @author Jose Enrique Lopez
#' @date 10-10-20 19:49
getConsts <- function (addends){
constants <- c()
for (i in 1:length(addends)){
constant <- -1*as.numeric(trimws(addends[[i]][[length(addends[[i]])]]))
constants<-append(constants, constant)
}
return (constants)
}
getVars <- function (addends){
matrix_data = parseAddends(addends)
if (length(matrix_data)){
return(matrix_data$vars)
} else{
print ("Variables are not the same")
return (matrix_data)
}
}
getCoeffs <-function (addends){
matrix_data = parseAddends(addends)
return(matrix_data$coeffs)
}
parseAddends <- function (addends){
vars <- c()
coeffs <- c()
for (i in 1: length (addends)){
eq_vars <- c ()
eq_coeffs <- c()
for (j in 1: length(addends[[i]][-length(addends[[i]])])){
factors = strsplit(addends[[i]][[j]], "\\*")
coeff = as.numeric(trimws(factors[[1]][[1]]))
var = trimws(factors[[1]][[2]])
eq_vars <- append(eq_vars, var)
eq_coeffs <- append (eq_coeffs, coeff)
}
if (!length(vars)){
vars <- sort(eq_vars)
}
if (!setequal(eq_vars, vars)){
return (list())
}
sorted_eq_coeffs <-numeric (length(eq_vars))
for (i in 1:length(eq_vars)){
degree = strtoi(strsplit(eq_vars[i], "")[[1]][2])
sorted_eq_coeffs[degree] <- eq_coeffs[i]
}
coeffs <- append (coeffs, sorted_eq_coeffs)
}
return (list(vars = vars, coeffs = coeffs))
}
deparseSystem <-function(system){
equations<-c()
for (i in 1:length(system)){
eq <- deparse(system[[i]])
eq_str <- c()
for (i in 2: length (eq)){
eq_str <- paste(eq_str, eq[[i]])
}
equations <- append(equations, eq_str)
}
return (equations)
}
buildMatrix <-function (equations){
addends <- strsplit (equations, "\\+")
vars <- getVars(addends)
if (!length(vars)) return (NA)
consts <- getConsts(addends)
coeffs <- getCoeffs(addends)
mat <- matrix (coeffs, nrow = length(equations), ncol=length(vars), byrow = TRUE)
rownames(mat)<-(1:length(equations))
mat <-cbind(mat, consts)
colnames(mat)<-c(vars, "RHS")
return (list(variables = vars, augcoeffmatrix = mat))
}
AugCoeffMatrix <-function (system){
equations <- deparseSystem (system)
matrix_data <- buildMatrix(equations)
return (matrix_data)
}
E1 <- function (x1, x2, x3) 4 * x1 + -3 * x2  + 1 * x3 + 10
E2 <- function (x1, x2, x3) 2 * x1 + 1 * x2 + 3 * x3 + 0
E3 <- function (x1, x2, x3) -1 * x1 + 2 * x2 -5 + * x3 + -17
system = list(E1, E2, E3)
# system <- list(E1, E2, E3, E4, E5, E6);
result <- AugCoeffMatrix(system);
print (result)
#' This R script takes a system of equations and converts it
#' into its matrix representation. The system is deparsed and each equation
#' is tokenized into its corresponding addends and factors. Each token is then
#' parsed to arrive at the constants, coefficients, and variables of the system.
#' This information is  compiled into a list containing 1) an augmented coefficient
#' matrix representing the system and 2) a vector of the variables.
#' This list is returned once the system of equations has been successfully parsed;
#' otherwise, a value of NA is returned.
#'
#' @author Jose Enrique Lopez
#' @date 10-10-20 19:49
getConsts <- function (addends){
constants <- c()
for (i in 1:length(addends)){
constant <- -1*as.numeric(trimws(addends[[i]][[length(addends[[i]])]]))
constants<-append(constants, constant)
}
return (constants)
}
getVars <- function (addends){
matrix_data = parseAddends(addends)
if (length(matrix_data)){
return(matrix_data$vars)
} else{
print ("Variables are not the same")
return (matrix_data)
}
}
getCoeffs <-function (addends){
matrix_data = parseAddends(addends)
return(matrix_data$coeffs)
}
parseAddends <- function (addends){
vars <- c()
coeffs <- c()
for (i in 1: length (addends)){
eq_vars <- c ()
eq_coeffs <- c()
for (j in 1: length(addends[[i]][-length(addends[[i]])])){
factors = strsplit(addends[[i]][[j]], "\\*")
coeff = as.numeric(trimws(factors[[1]][[1]]))
var = trimws(factors[[1]][[2]])
eq_vars <- append(eq_vars, var)
eq_coeffs <- append (eq_coeffs, coeff)
}
if (!length(vars)){
vars <- sort(eq_vars)
}
if (!setequal(eq_vars, vars)){
return (list())
}
sorted_eq_coeffs <-numeric (length(eq_vars))
for (i in 1:length(eq_vars)){
degree = strtoi(strsplit(eq_vars[i], "")[[1]][2])
sorted_eq_coeffs[degree] <- eq_coeffs[i]
}
coeffs <- append (coeffs, sorted_eq_coeffs)
}
return (list(vars = vars, coeffs = coeffs))
}
deparseSystem <-function(system){
equations<-c()
for (i in 1:length(system)){
eq <- deparse(system[[i]])
eq_str <- c()
for (i in 2: length (eq)){
eq_str <- paste(eq_str, eq[[i]])
}
equations <- append(equations, eq_str)
}
return (equations)
}
buildMatrix <-function (equations){
addends <- strsplit (equations, "\\+")
vars <- getVars(addends)
if (!length(vars)) return (NA)
consts <- getConsts(addends)
coeffs <- getCoeffs(addends)
mat <- matrix (coeffs, nrow = length(equations), ncol=length(vars), byrow = TRUE)
rownames(mat)<-(1:length(equations))
mat <-cbind(mat, consts)
colnames(mat)<-c(vars, "RHS")
return (list(variables = vars, augcoeffmatrix = mat))
}
AugCoeffMatrix <-function (system){
equations <- deparseSystem (system)
matrix_data <- buildMatrix(equations)
return (matrix_data)
}
E1 <- function (x1, x2, x3) 4 * x1 + -3 * x2  + 1 * x3 + 10
E2 <- function (x1, x2, x3) 2 * x1 + 1 * x2 + 3 * x3 + 0
E3 <- function (x1, x2, x3) -1 * x1 + 2 * x2 + -5  * x3 + -17
system = list(E1, E2, E3)
# system <- list(E1, E2, E3, E4, E5, E6);
result <- AugCoeffMatrix(system);
print (result)
#' This R script takes a system of equations and converts it
#' into its matrix representation. The system is deparsed and each equation
#' is tokenized into its corresponding addends and factors. Each token is then
#' parsed to arrive at the constants, coefficients, and variables of the system.
#' This information is  compiled into a list containing 1) an augmented coefficient
#' matrix representing the system and 2) a vector of the variables.
#' This list is returned once the system of equations has been successfully parsed;
#' otherwise, a value of NA is returned.
#'
#' @author Jose Enrique Lopez
#' @date 10-10-20 19:49
getConsts <- function (addends){
constants <- c()
for (i in 1:length(addends)){
constant <- -1*as.numeric(trimws(addends[[i]][[length(addends[[i]])]]))
constants<-append(constants, constant)
}
return (constants)
}
getVars <- function (addends){
matrix_data = parseAddends(addends)
if (length(matrix_data)){
return(matrix_data$vars)
} else{
print ("Variables are not the same")
return (matrix_data)
}
}
getCoeffs <-function (addends){
matrix_data = parseAddends(addends)
return(matrix_data$coeffs)
}
parseAddends <- function (addends){
vars <- c()
coeffs <- c()
for (i in 1: length (addends)){
eq_vars <- c ()
eq_coeffs <- c()
for (j in 1: length(addends[[i]][-length(addends[[i]])])){
factors = strsplit(addends[[i]][[j]], "\\*")
coeff = as.numeric(trimws(factors[[1]][[1]]))
var = trimws(factors[[1]][[2]])
eq_vars <- append(eq_vars, var)
eq_coeffs <- append (eq_coeffs, coeff)
}
if (!length(vars)){
vars <- sort(eq_vars)
}
if (!setequal(eq_vars, vars)){
return (list())
}
sorted_eq_coeffs <-numeric (length(eq_vars))
for (i in 1:length(eq_vars)){
degree = strtoi(strsplit(eq_vars[i], "")[[1]][2])
sorted_eq_coeffs[degree] <- eq_coeffs[i]
}
coeffs <- append (coeffs, sorted_eq_coeffs)
}
return (list(vars = vars, coeffs = coeffs))
}
deparseSystem <-function(system){
equations<-c()
for (i in 1:length(system)){
eq <- deparse(system[[i]])
eq_str <- c()
for (i in 2: length (eq)){
eq_str <- paste(eq_str, eq[[i]])
}
equations <- append(equations, eq_str)
}
return (equations)
}
buildMatrix <-function (equations){
addends <- strsplit (equations, "\\+")
vars <- getVars(addends)
if (!length(vars)) return (NA)
consts <- getConsts(addends)
coeffs <- getCoeffs(addends)
mat <- matrix (coeffs, nrow = length(equations), ncol=length(vars), byrow = TRUE)
rownames(mat)<-(1:length(equations))
mat <-cbind(mat, consts)
colnames(mat)<-c(vars, "RHS")
return (list(variables = vars, augcoeffmatrix = mat))
}
AugCoeffMatrix <-function (system){
equations <- deparseSystem (system)
matrix_data <- buildMatrix(equations)
return (matrix_data)
}
E1 <- function (x1, x2, x3, x4, x5, x6) 245 * x1 + 54 * x2 + 30 * x3 + 29 * x4 + 16.25 * x5 + 0 * x6 + -1000
E2 <- function (x1, x2, x3, x4, x5, x6) 35 * x1 + 162 * x2 + 0 * x3 + 29 * x4 + 16.25 * x5 + 36 * x6 + -700
E3 <- function (x1, x2, x3, x4, x5, x6) 17.5 * x1 + 27 * x2 + 225 * x3 + 29 * x4 + 0 * x5 + 18 * x6 + -1300
E4 <- function (x1, x2, x3, x4, x5, x6) 17.5 * x1 + 0 * x2 + 15 * x3 + 174 * x4 + 16.25 * x5 + 18 * x6 + -900
E5 <- function (x1, x2, x3, x4, x5, x6) 0 * x1 + 13.5 * x2 + 15 * x3 + 29 * x4 + 243.75 * x5 + 72 * x6 + -1500
E6 <- function (x1, x2, x3, x4, x5, x6) 35 * x1 + 13.5 * x2 + 15 * x3 + 0 * x4 + 32.5 * x5 + 216 * x6 + -1200
system <- list(E1, E2, E3, E4, E5, E6)
print(AugCoeffMatrix(system))
#' This R script takes a system of equations and converts it
#' into its matrix representation. The system is deparsed and each equation
#' is tokenized into its corresponding addends and factors. Each token is then
#' parsed to arrive at the constants, coefficients, and variables of the system.
#' This information is  compiled into a list containing 1) an augmented coefficient
#' matrix representing the system and 2) a vector of the variables.
#' This list is returned once the system of equations has been successfully parsed;
#' otherwise, a value of NA is returned.
#'
#' @author Jose Enrique Lopez
#' @date 10-10-20 19:49
getConsts <- function (addends){
constants <- c()
for (i in 1:length(addends)){
constant <- -1*as.numeric(trimws(addends[[i]][[length(addends[[i]])]]))
constants<-append(constants, constant)
}
return (constants)
}
getVars <- function (addends){
matrix_data = parseAddends(addends)
if (length(matrix_data)){
return(matrix_data$vars)
} else{
print ("Variables are not the same")
return (matrix_data)
}
}
getCoeffs <-function (addends){
matrix_data = parseAddends(addends)
return(matrix_data$coeffs)
}
parseAddends <- function (addends){
vars <- c()
coeffs <- c()
for (i in 1: length (addends)){
eq_vars <- c ()
eq_coeffs <- c()
for (j in 1: length(addends[[i]][-length(addends[[i]])])){
factors = strsplit(addends[[i]][[j]], "\\*")
coeff = as.numeric(trimws(factors[[1]][[1]]))
var = trimws(factors[[1]][[2]])
eq_vars <- append(eq_vars, var)
eq_coeffs <- append (eq_coeffs, coeff)
}
if (!length(vars)){
vars <- sort(eq_vars)
}
if (!setequal(eq_vars, vars)){
return (list())
}
sorted_eq_coeffs <-numeric (length(eq_vars))
for (i in 1:length(eq_vars)){
degree = strtoi(strsplit(eq_vars[i], "")[[1]][2])
sorted_eq_coeffs[degree] <- eq_coeffs[i]
}
coeffs <- append (coeffs, sorted_eq_coeffs)
}
return (list(vars = vars, coeffs = coeffs))
}
deparseSystem <-function(system){
equations<-c()
for (i in 1:length(system)){
eq <- deparse(system[[i]])
eq_str <- c()
for (i in 2: length (eq)){
eq_str <- paste(eq_str, eq[[i]])
}
equations <- append(equations, eq_str)
}
return (equations)
}
buildMatrix <-function (equations){
addends <- strsplit (equations, "\\+")
vars <- getVars(addends)
if (!length(vars)) return (NA)
consts <- getConsts(addends)
coeffs <- getCoeffs(addends)
mat <- matrix (coeffs, nrow = length(equations), ncol=length(vars), byrow = TRUE)
rownames(mat)<-(1:length(equations))
mat <-cbind(mat, consts)
colnames(mat)<-c(vars, "RHS")
return (list(variables = vars, augcoeffmatrix = mat))
}
AugCoeffMatrix <-function (system){
equations <- deparseSystem (system)
matrix_data <- buildMatrix(equations)
return (matrix_data)
}
E1 <- function (x1, x2, x3, x4, x5, x6) 245 * x1 + 54 * x2 + 30 * x3 + 29 * x4 + 16.25 * x5 + 0 * x6 + -1000
E2 <- function (x1, x2, x3, x4, x5, x6) 35 * x1 + 162 * x2 + 0 * x3 + 29 * x4 + 16.25 * x5 + 36 * x6 + -700
E3 <- function (x1, x2, x3, x4, x5, x6) 17.5 * x1 + 27 * x2 + 225 * x3 + 29 * x4 + 0 * x5 + 18 * x6 + -1300
E4 <- function (x1, x2, x3, x4, x5, x6) 17.5 * x1 + 0 * x2 + 15 * x3 + 174 * x4 + 16.25 * x5 + 18 * x6 + -900
E5 <- function (x1, x2, x3, x4, x5, x6) 0 * x1 + 13.5 * x2 + 15 * x3 + 29 * x4 + 243.75 * x5 + 72 * x6 + -1500
E6 <- function (x1, x2, x3, x4, x5, x6) 35 * x1 + 13.5 * x2 + 15 * x3 + 0 * x4 + 32.5 * x5 + 216 * x6 + -1200
system <- list(E1, E2, E3, E4, E5, E6)
print(AugCoeffMatrix(system))
#' This R script solves the forester problem in the problem set.
#' A system of six equations is first set up, with the following features:
#'
#' coefficients -> volume per hectare of each wood type per planting site
#' constants -> required volume of each wood type
#' unknowns (x1, x2, ...x6) -> how much should be logged per planting site
#'
#' The system is then converted into an augmented coefficient matrix through
#' the AugCoeffMatrix function. Finally, the solution set of the problem is
#' arrived at through functions performing Gaussian or Gauss-Jordan elmination.
#'
#' @author Jose Enrique Lopez
#' @date 12-10-20 20:50
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
source ("LopezEx04.R")
E1 <- function (x1, x2, x3, x4, x5, x6) 245 * x1 + 54 * x2 + 30 * x3 + 29 * x4 + 16.25 * x5 + 0 * x6 + -1000
E2 <- function (x1, x2, x3, x4, x5, x6) 35 * x1 + 162 * x2 + 0 * x3 + 29 * x4 + 16.25 * x5 + 36 * x6 + -700
E3 <- function (x1, x2, x3, x4, x5, x6) 17.5 * x1 + 27 * x2 + 225 * x3 + 29 * x4 + 0 * x5 + 18 * x6 + -1300
E4 <- function (x1, x2, x3, x4, x5, x6) 17.5 * x1 + 0 * x2 + 15 * x3 + 174 * x4 + 16.25 * x5 + 18 * x6 + -900
E5 <- function (x1, x2, x3, x4, x5, x6) 0 * x1 + 13.5 * x2 + 15 * x3 + 29 * x4 + 243.75 * x5 + 72 * x6 + -1500
E6 <- function (x1, x2, x3, x4, x5, x6) 35 * x1 + 13.5 * x2 + 15 * x3 + 0 * x4 + 32.5 * x5 + 216 * x6 + -1200
system <-list(E1, E2, E3, E4, E5, E6)
result <-AugCoeffMatrix(system)
GaussianResult <- GaussianElimination(system)
GaussJordanResult <- GaussJordanElimination(system)
print(GaussianResult)
print(GaussJordanResult)
